basePath: /
definitions:
  model.Greeting:
    description: Greeting model
    properties:
      message:
        description: Message is the greeting text
        example: Hello, World!
        maxLength: 100
        minLength: 3
        type: string
    required:
    - message
    type: object
  model.GreetingInput:
    description: Input model for creating a new greeting
    properties:
      message:
        description: Message is the greeting text to be created
        example: Hello, World!
        maxLength: 100
        minLength: 3
        type: string
    required:
    - message
    type: object
  model.HealthStatus:
    description: Health status model
    properties:
      status:
        description: Status indicates the health of the application
        example: UP
        type: string
    required:
    - status
    type: object
  model.ProblemDetail:
    properties:
      detail:
        type: string
      error:
        type: string
      instance:
        type: string
      status:
        type: integer
      title:
        type: string
      type:
        type: string
      violations:
        items:
          $ref: '#/definitions/model.Violation'
        type: array
    type: object
  model.Violation:
    properties:
      code:
        type: string
      field:
        type: string
      message:
        type: string
      object:
        type: string
      rejectedValue:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://example.com/contact
  description: This is a sample server for Gin application.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: Gin Samples API
  version: "1.0"
paths:
  /api/hello:
    get:
      consumes:
      - application/json
      description: Returns a greeting message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Greeting'
      summary: Get a greeting message
      tags:
      - hello
    post:
      consumes:
      - application/json
      description: Creates a new greeting
      parameters:
      - description: Greeting Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.GreetingInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Greeting'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ProblemDetail'
      summary: Create a new greeting message
      tags:
      - hello
  /api/hello/all:
    get:
      consumes:
      - application/json
      description: Returns all greeting messages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Greeting'
            type: array
      summary: Get all greeting messages
      tags:
      - hello
  /health/liveness:
    get:
      consumes:
      - application/json
      description: Returns the liveness status of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HealthStatus'
      summary: Check if the application is alive
      tags:
      - health
  /health/readiness:
    get:
      consumes:
      - application/json
      description: Returns the readiness status of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HealthStatus'
      summary: Check if the application is ready
      tags:
      - health
swagger: "2.0"
