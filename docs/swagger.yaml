basePath: /
definitions:
  dto.GreetingInput:
    description: Input dto for creating a new greeting
    properties:
      message:
        description: Message is the greeting text to be created
        example: Hello, World!
        maxLength: 100
        minLength: 3
        type: string
    required:
    - message
    type: object
  dto.GreetingResponse:
    description: Greeting dto
    properties:
      createdAt:
        description: CreatedAt is the timestamp when the greeting was created
        example: "2025-01-05T10:00:00Z"
        type: string
      id:
        description: ID of the greeting
        example: 1
        type: integer
      message:
        description: Message is the greeting text
        example: Hello, World!
        maxLength: 100
        minLength: 3
        type: string
      updatedAt:
        description: UpdatedAt is the timestamp when the greeting was last updated
        example: "2025-01-05T12:00:00Z"
        type: string
    required:
    - createdAt
    - id
    - message
    type: object
  dto.HealthStatus:
    description: Health status dto
    properties:
      status:
        description: Status indicates the health of the application
        example: UP
        type: string
    required:
    - status
    type: object
  dto.LoginInput:
    description: Login request DTO containing username and password
    properties:
      password:
        description: Password is the password of the user
        example: password
        maxLength: 100
        minLength: 4
        type: string
      username:
        description: Username is the username of the user
        example: admin
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.ProblemDetail:
    description: Represents a structured error response for the API
    properties:
      detail:
        description: Detail provides a more detailed explanation of the error
        example: One or more fields failed validation
        type: string
      error:
        description: Error is a machine-readable error code
        example: invalid_request
        type: string
      instance:
        description: Instance is a URI that identifies the specific occurrence of
          the error
        example: /api/hello
        type: string
      status:
        description: HTTP status code for the error
        example: 400
        type: integer
      title:
        description: Title is a short, human-readable summary of the error
        example: Validation Error
        type: string
      type:
        description: Type of the error, usually a URI identifying the error type
        example: about:blank
        type: string
      violations:
        description: Violations is a list of validation errors (optional)
        items:
          $ref: '#/definitions/dto.Violation'
        type: array
    type: object
  dto.TokenResponse:
    description: JWT token response DTO
    properties:
      accessToken:
        description: AccessToken is the JWT access token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      accessTokenExpiresIn:
        description: AccessTokenExpiresIn is the expiration time of the access token
          in seconds
        example: 3600
        type: integer
      tokenType:
        description: TokenType is the type of the token
        example: Bearer
        type: string
    required:
    - accessToken
    - accessTokenExpiresIn
    - tokenType
    type: object
  dto.Violation:
    description: Represents a single validation error for a field
    properties:
      code:
        description: Code of the validation rule that was violated
        example: min
        type: string
      field:
        description: Field that failed validation
        example: message
        type: string
      message:
        description: Error message for the violation
        example: The message must be at least 3 characters long
        type: string
      object:
        description: Object that contains the field (optional)
        example: GreetingInput
        type: string
      rejectedValue:
        description: Rejected value of the field
        example: Hi
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://example.com/contact
  description: This is a sample server for Gin application with JWT authentication.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: Gin Samples API
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Validates user credentials and returns a JWT token
      parameters:
      - description: Login Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
      summary: Authenticate user and generate token
      tags:
      - authentication
  /api/hello:
    get:
      consumes:
      - application/json
      description: Returns a greeting message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GreetingResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
      security:
      - BearerAuth: []
      summary: Get a greeting message
      tags:
      - hello
    post:
      consumes:
      - application/json
      description: Creates a new greeting
      parameters:
      - description: Greeting Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.GreetingInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.GreetingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
      security:
      - BearerAuth: []
      summary: Create a new greeting message
      tags:
      - hello
  /api/hello/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a greeting message by its ID
      parameters:
      - description: Greeting ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
      security:
      - BearerAuth: []
      summary: Delete a greeting message by ID
      tags:
      - hello
    get:
      consumes:
      - application/json
      description: Returns a single greeting message by its ID
      parameters:
      - description: Greeting ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GreetingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
      security:
      - BearerAuth: []
      summary: Get a greeting by ID
      tags:
      - hello
    put:
      consumes:
      - application/json
      description: Updates a greeting message by its ID
      parameters:
      - description: Greeting ID
        in: path
        name: id
        required: true
        type: integer
      - description: Greeting Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.GreetingInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GreetingResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
      security:
      - BearerAuth: []
      summary: Update a greeting message by ID
      tags:
      - hello
  /api/hello/all:
    get:
      consumes:
      - application/json
      description: Returns all greeting messages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GreetingResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ProblemDetail'
      security:
      - BearerAuth: []
      summary: Get all greeting messages
      tags:
      - hello
  /health/liveness:
    get:
      consumes:
      - application/json
      description: Returns the liveness status of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.HealthStatus'
      summary: Check if the application is alive
      tags:
      - health
  /health/readiness:
    get:
      consumes:
      - application/json
      description: Returns the readiness status of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.HealthStatus'
      summary: Check if the application is ready
      tags:
      - health
securityDefinitions:
  BearerAuth:
    description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization:
      Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
